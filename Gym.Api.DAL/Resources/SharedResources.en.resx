<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AbilityOfSystemMoneyRequired" xml:space="preserve">
    <value>AbilityOfSystemMoney is required</value>
  </data>
  <data name="AddressRequired" xml:space="preserve">
    <value>Address is required</value>
  </data>
  <data name="AgeRequired" xml:space="preserve">
    <value>Age is required</value>
  </data>
  <data name="AimOfJoinRequired" xml:space="preserve">
    <value>AimOfJoin is required</value>
  </data>
  <data name="AllergyOfFoodRequried" xml:space="preserve">
    <value>AllergyOfFood is required</value>
  </data>
  <data name="AnyInfectionRequired" xml:space="preserve">
    <value>AnyInfection is required</value>
  </data>
  <data name="AnyPainsRequired" xml:space="preserve">
    <value>AnyPains is required</value>
  </data>
  <data name="ApplicationUserIdRequired" xml:space="preserve">
    <value>UserId is required</value>
  </data>
  <data name="AreYouSomkerRequired" xml:space="preserve">
    <value>AreYouSomker is required</value>
  </data>
  <data name="BadRequestMessage" xml:space="preserve">
    <value>a bad Request , You have made</value>
  </data>
  <data name="DailyWorkRequired" xml:space="preserve">
    <value>DailyWork is required</value>
  </data>
  <data name="DurationRequired" xml:space="preserve">
    <value>Duration is required</value>
  </data>
  <data name="EmailAddressDataType" xml:space="preserve">
    <value>Should be Email Address</value>
  </data>
  <data name="EmailRequired" xml:space="preserve">
    <value>Email is required</value>
  </data>
  <data name="EndPackageRequired" xml:space="preserve">
    <value>EndPackage is required</value>
  </data>
  <data name="ErrorInPassword" xml:space="preserve">
    <value>Password with this Email InCorrect</value>
  </data>
  <data name="ErrorInSaving" xml:space="preserve">
    <value>Error in saveing please try again</value>
  </data>
  <data name="ExerciseIdNotFound" xml:space="preserve">
    <value>Exercise with this Id is not found</value>
  </data>
  <data name="ExerciseIdRequired" xml:space="preserve">
    <value>Exercise Id is required</value>
  </data>
  <data name="FoodIdNotFound" xml:space="preserve">
    <value>Food with this Id is not found</value>
  </data>
  <data name="FoodIdRequired" xml:space="preserve">
    <value>Food Id is required</value>
  </data>
  <data name="FoodSystemRequired" xml:space="preserve">
    <value>FoodSystem is required</value>
  </data>
  <data name="GenderRequired" xml:space="preserve">
    <value>Gender is required</value>
  </data>
  <data name="IdRequired" xml:space="preserve">
    <value>Id is required</value>
  </data>
  <data name="ImageRequired" xml:space="preserve">
    <value>Image is required</value>
  </data>
  <data name="IsActiveRequired" xml:space="preserve">
    <value>IsActive is required</value>
  </data>
  <data name="LastExerciseRequired" xml:space="preserve">
    <value>LastExercise is required</value>
  </data>
  <data name="LongRequired" xml:space="preserve">
    <value>Long is required</value>
  </data>
  <data name="MaxLength100" xml:space="preserve">
    <value>Maximum length is 100</value>
  </data>
  <data name="NameRequired" xml:space="preserve">
    <value>Name is required</value>
  </data>
  <data name="NewPriceRequired" xml:space="preserve">
    <value>NewPrice is required</value>
  </data>
  <data name="NumberOfDayesRequired" xml:space="preserve">
    <value>NumberOfDayes is required</value>
  </data>
  <data name="NumberOfMealsRequired" xml:space="preserve">
    <value>NumberOfMeals is required</value>
  </data>
  <data name="NumOfCaloriesRequired" xml:space="preserve">
    <value>Number Of Calories is required</value>
  </data>
  <data name="NumOfCountRequired" xml:space="preserve">
    <value>Number Of Count is required</value>
  </data>
  <data name="NumOfGramsRequired" xml:space="preserve">
    <value>Number Of Grams is required</value>
  </data>
  <data name="NumOfGroupsRequired" xml:space="preserve">
    <value>Number Of Groups is required</value>
  </data>
  <data name="NumOfProteinRequired" xml:space="preserve">
    <value>Number Of Protein is required</value>
  </data>
  <data name="OldPriceRequired" xml:space="preserve">
    <value>OldPrice is required</value>
  </data>
  <data name="PackageIdNotFound" xml:space="preserve">
    <value>Package with this Id is not found</value>
  </data>
  <data name="PackageIdRequried" xml:space="preserve">
    <value>PackageId is required</value>
  </data>
  <data name="PackageTypeRequired" xml:space="preserve">
    <value>Type is required</value>
  </data>
  <data name="PasswordDataType" xml:space="preserve">
    <value>Should be password</value>
  </data>
  <data name="PasswordRequired" xml:space="preserve">
    <value>Password is required</value>
  </data>
  <data name="PasswordShape" xml:space="preserve">
    <value>Password must be at least 8 characters long, include an uppercase letter, a lowercase letter, a number, and a special character.</value>
  </data>
  <data name="PhoneNumberRequired" xml:space="preserve">
    <value>Phone is required</value>
  </data>
  <data name="StartPackageRequired" xml:space="preserve">
    <value>StartPackage is required</value>
  </data>
  <data name="String4" xml:space="preserve">
    <value>d</value>
  </data>
  <data name="String5" xml:space="preserve">
    <value>d</value>
  </data>
  <data name="String6" xml:space="preserve">
    <value>d</value>
  </data>
  <data name="String7" xml:space="preserve">
    <value>d</value>
  </data>
  <data name="String8" xml:space="preserve">
    <value>d</value>
  </data>
  <data name="TargetMuscleRequired" xml:space="preserve">
    <value>TargetMuscle is required</value>
  </data>
  <data name="TrainerDataIdNotFound" xml:space="preserve">
    <value>TrainerData with this Id is not found</value>
  </data>
  <data name="UserDon'tHaveThisExercise" xml:space="preserve">
    <value>User don't have this exercise</value>
  </data>
  <data name="UserDon'tHaveThisFood" xml:space="preserve">
    <value>User don't have this food</value>
  </data>
  <data name="UserEmailNotFound" xml:space="preserve">
    <value>User with this Email is not found</value>
  </data>
  <data name="UserIdNotFound" xml:space="preserve">
    <value>User with this Id is not found</value>
  </data>
  <data name="UserIdRequired" xml:space="preserve">
    <value>User Id is required</value>
  </data>
  <data name="UserNameRequired" xml:space="preserve">
    <value>UserName is required</value>
  </data>
  <data name="WeightRequired" xml:space="preserve">
    <value>Weight is required</value>
  </data>
</root>